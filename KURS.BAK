
#include <stdio.h>
#include <conio.h>
#include <dos.h>
#include <stdlib.h>

int i, j;
FILE *mas, *out;

void main(int argc, char *argv[])
{
float int mass_chislo[9][9], u=1;
// объявление переменных для запоминания промежуточных значений максимумов и минимумов
short int max2, min2, max1, min1, rez;

// вывод индексов элементов матрицы в гриде
// заремарено автоматическое заполнение первоначальной матрицы
for(i=0; i<9;i++)
    for(j=0; j<9;j++)
        mass_chislo[i][j]=i*j+1;

window(1, 1, 80, 64);
textbackground(BLACK);
clrscr();

cputs("\n\r Vvedite elementi massiva:");

for(i=0; i<9;i++)
    {
    cpintf("\n\r");
    for(j=0; j<9;j++)
        {
	fscanf(mas,"%f",&mass_chislo[i][j]);
        cprintf(" %-4.1f,mass_chislo[i][j]);
	}
    }
// открываем файл для записи (если его нет - создается, если есть - затирается)
ofstream outfile("ids272.inp");
if(!outfile)
   cputs("Ne mogu sozdat file");

// выводим в файл элементы i-й строки матрицы разделенные в файле пробелом,
// последним элементом является символ конца строки endl
for(i=0; i<9; i++)
    outfile<<mass_chislo[i][0]<<' '<<mass_chislo[i][1]<<' '<<mass_chislo[i][2]<<' '<<mass_chislo[i][3]<<' '<<mass_chislo[i][4]<<' '<<mass_chislo[i][5]<<' '<<mass_chislo[i][6]<<' '<<mass_chislo[i][7]<<' '<<mass_chislo[i][8]<<endl;
// закрываем файл
outfile.close();
// открываем файл для чтения
ifstream infile("ids272.inp");
if(!infile)
   cputs("Ne mogu otkrit file");

// вносим значения из файла в матрицу
for(int i=0; i<9;i++)
    infile>>mass_chislo[i][0]>>mass_chislo[i][1]>>mass_chislo[i][2]>>mass_chislo[i][3]>>mass_chislo[i][4]>>mass_chislo[i][5]>>mass_chislo[i][6]>>mass_chislo[i][7]>>mass_chislo[i][8];
// закрываем файл
infile.close();
// вносим значения матрицы в строковую таблицу Str1
}

/*
//---------------------------------------------------------------------------
void __fastcall TForm1::Button2Click(TObject *Sender)
{

// матрица двумерная: следовательно для перебора всех элементов используем
// двойной цикл
// внешний цикл - перебираем столбцы матрицы
for(int t=0; t<9; t++)
    {
    //вложенный цикл - перебираем строки диагонали
    for(int y=0; y<t+1; y++)
        {
        // хитрые вычисления нужны для того: чтобы не писать второй раз двойные циклы для вычисления
        // диагонале, которые будут идти после побочной (побочная идет с 8:0 элемента по 0:8),
        // т.е. за один проход делаем два действия. исключение - побочная диагонль, при т=8 вычисления
        // только с побочной диагональю
        if(y == 0)
            {
            // определяем первоначальное значение максимума и минимума в диагонали c 0 по 8 включительно
            max1=mass_chislo[t][y];
            min1=mass_chislo[t][y];
            // заполняем конкатенацию номеров соответствующего элемента в массив
            // 0-я строка - максимумы; 1-я минимумы
            mass_konkat[t][0]=IntToStr(t)+":"+IntToStr(y);
            mass_konkat[t][1]=IntToStr(t)+":"+IntToStr(y);
            // определяем первоначальное значение максимума и минимума в диагонали c 16 по 9 включительно
            // y-t+8  - расчет номера столбца, 8-y - номер строки элемента в диагонали
            max2=mass_chislo[y-t+8][8-y];
            min2=mass_chislo[y-t+8][8-y];
            // заполняем конкатенацию(склеивание строк. в нашем случае строка-номер элемента в матрице)
            // номеров соответствующего элемента в массив
            // 0-я строка - максимумы; 1-я минимумы
            mass_konkat[16-t][0]=IntToStr(y-t+8)+":"+IntToStr(8-y);
            mass_konkat[16-t][1]=IntToStr(y-t+8)+":"+IntToStr(8-y);
            }
        else
           {
           // если первоначальный (или запомненный) максимум менше текущего значения элемента
           if(max1 < mass_chislo[t-y][y])
               {
               // то меняем значение максимума для диагоналей с 0 по 8 (слева направо)
               max1=mass_chislo[t-y][y];
               // и меняем соответствующее значение конкатенации
               mass_konkat[t][0]=IntToStr(t-y)+":"+IntToStr(y);
               }
           // аналогичное вычисление для минимума
           if(min1 > mass_chislo[t-y][y])
               {
               min1=mass_chislo[t-y][y];
               mass_konkat[t][1]=IntToStr(t-y)+":"+IntToStr(y);
               }
           // и аналогичные расчеты для максимумов и минимумов диагоналей с 9 по 16
           if(t != 8)
               {
               if(max2 < mass_chislo[y-t+8][8-y])
                   {
                   max2=mass_chislo[y-t+8][8-y];
                   mass_konkat[16-t][0]=IntToStr(y-t+8)+":"+IntToStr(8-y);
                   }
               if(min2 > mass_chislo[y-t+8][8-y])
                   {
                   min2=mass_chislo[y-t+8][8-y];
                   mass_konkat[16-t][1]=IntToStr(y-t+8)+":"+IntToStr(8-y);
                   }
               }
           }
        }
    }
// выводим значения маотрицы результатов в грид Str2
for(int t=0; t<17; t++)
    for(int y=0; y<2; y++)
        Str2->Cells[t+1][y+1]=mass_konkat[t][y];

ofstream outfile("ids272out.inp");
if(!outfile)
   {
   ShowMessage("Не могу создать файл!");
   Abort();
   }
// выводим результаты операций в файл
for(int j=0; j<2; j++)
    for(int i=0; i<17; i++)
        {
        if (i == 16)
           // если записываемые элемент является последним в строке - даем символ конец строки в файле
           outfile<<mass_konkat[i][j].c_str()<<endl;
        else
           outfile<<mass_konkat[i][j].c_str()<<' ';
        }
outfile.close();

}
//---------------------------------------------------------------------------
void __fastcall TForm1::FormClose(TObject *Sender, TCloseAction &Action)
{
// try - ловим ошибку
try
    {
    // если ошибки нет - исполняем код ниже
    // при закрытии программы подаем звуковой сигнал (функция Beep) частота 100 герц,
    // длительность равна значению задаваемого параметра
    // параметр указывается при запуске программы из командной строки и
    // считывыается функцией ParamStr(1) :1 - номер параметра(он должен быть один)
    Beep(100,StrToInt(ParamStr(1)));
    }
catch(...)
    // если ошибка есть (ошибка - отсутствие заданного значения параметра)
    // выдаем сообщение
    {
    ShowMessage("Не задали параметр или его чмсловое значение");
    }
}
//---------------------------------------------------------------------------
*/